// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bookshop.data.Concrete.EfCore;

namespace bookshop.data.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20220408215122_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("bookshop.entity.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageAuthor")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            ImageAuthor = "7.jpg",
                            Name = "Haluk Yavuzer",
                            Url = "haluk-yavuzer"
                        },
                        new
                        {
                            AuthorId = 2,
                            ImageAuthor = "8.jpg",
                            Name = "İskender Pala",
                            Url = "iskender-pala"
                        },
                        new
                        {
                            AuthorId = 3,
                            ImageAuthor = "6.jpg",
                            Name = "Yahya Kemal",
                            Url = "yahya-kemal"
                        },
                        new
                        {
                            AuthorId = 4,
                            ImageAuthor = "2.jpg",
                            Name = "Sait Faik Abasıyanık",
                            Url = "sait-faik"
                        },
                        new
                        {
                            AuthorId = 5,
                            ImageAuthor = "1.jpg",
                            Name = "Cengiz Aytmatov",
                            Url = "cengiz-aytmatov"
                        },
                        new
                        {
                            AuthorId = 6,
                            ImageAuthor = "3.jpg",
                            Name = "Ömer Seyfettin",
                            Url = "ömer-seyfettin"
                        },
                        new
                        {
                            AuthorId = 7,
                            ImageAuthor = "5.jpg",
                            Name = "Tolstoy",
                            Url = "tolstoy"
                        },
                        new
                        {
                            AuthorId = 8,
                            ImageAuthor = "4.jpg",
                            Name = "Orhan Kemal",
                            Url = "orhan-kemal"
                        });
                });

            modelBuilder.Entity("bookshop.entity.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("bookshop.entity.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("bookshop.entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Ev-Aile-Toplum",
                            Url = "ev-aile-toplum"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Deneme-İnceleme",
                            Url = "deneme-inceleme"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Öykü",
                            Url = "oyku"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Modern Türk Edebiyatı",
                            Url = "modern-turk-edebiyatı"
                        });
                });

            modelBuilder.Entity("bookshop.entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConversationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderState")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaymentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("bookshop.entity.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("bookshop.entity.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("ISBN")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int>("NumberOfPage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaperType")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ev-Aile-Toplum Serisi",
                            ISBN = 123456776,
                            ImageUrl = "7.jpg",
                            IsApproved = true,
                            IsHome = false,
                            Language = "Türkçe",
                            Name = "Mutlu Yaşlanmak",
                            NumberOfPage = 200,
                            PaperType = "Kuşe Kağıt",
                            Price = 17.0,
                            Url = "mutlu-yaslanmak"
                        },
                        new
                        {
                            ProductId = 2,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Deneme-İnceleme Serisi",
                            ISBN = 1230066,
                            ImageUrl = "5.jpg",
                            IsApproved = true,
                            IsHome = false,
                            Language = "Türkçe",
                            Name = "Bülbülün Kırk Şarkısı",
                            NumberOfPage = 300,
                            PaperType = "Kuşe Kağıt",
                            Price = 19.0,
                            Url = "bulbulun-kırk-sarkısı"
                        },
                        new
                        {
                            ProductId = 3,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Deneme-İnceleme Serisi",
                            ISBN = 12345666,
                            ImageUrl = "3.jpg",
                            IsApproved = true,
                            IsHome = false,
                            Language = "Türkçe",
                            Name = "Aziz İstanbul",
                            NumberOfPage = 400,
                            PaperType = "1.Hamur",
                            Price = 49.0,
                            Url = "aziz-istanbul"
                        },
                        new
                        {
                            ProductId = 4,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Modern Türk Edebiyatı Serisi",
                            ISBN = 1211300666,
                            ImageUrl = "8.jpg",
                            IsApproved = false,
                            IsHome = false,
                            Language = "Türkçe",
                            Name = "Lüzumsuz Adam",
                            NumberOfPage = 500,
                            PaperType = "2.Hamur",
                            Price = 33.0,
                            Url = "luzumsuz-adam"
                        },
                        new
                        {
                            ProductId = 5,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Öykü Serisi",
                            ISBN = 12344666,
                            ImageUrl = "2.jpg",
                            IsApproved = true,
                            IsHome = false,
                            Language = "İngilizce",
                            Name = "Toprak Ana",
                            NumberOfPage = 600,
                            PaperType = "1.Hamur",
                            Price = 17.0,
                            Url = "toprak-ana"
                        },
                        new
                        {
                            ProductId = 6,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Öykü Serisi",
                            ISBN = 12345996,
                            ImageUrl = "4.jpg",
                            IsApproved = true,
                            IsHome = false,
                            Language = "Türkçe",
                            Name = "Falaka",
                            NumberOfPage = 800,
                            PaperType = "3.Hamur",
                            Price = 49.0,
                            Url = "falaka"
                        },
                        new
                        {
                            ProductId = 7,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Öykü Serisi",
                            ISBN = 1234331166,
                            ImageUrl = "6.jpg",
                            IsApproved = false,
                            IsHome = false,
                            Language = "Türkçe",
                            Name = "İnsan Ne İle Yaşar",
                            NumberOfPage = 900,
                            PaperType = "Kuşe Kağıt",
                            Price = 33.0,
                            Url = "insan-ne-ile-yasar"
                        },
                        new
                        {
                            ProductId = 8,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Öykü Serisi",
                            ISBN = 1234533666,
                            ImageUrl = "9.jpg",
                            IsApproved = true,
                            IsHome = false,
                            Language = "Almanca",
                            Name = "İstanbul İstanbul",
                            NumberOfPage = 250,
                            PaperType = "3.Hamur",
                            Price = 17.0,
                            Url = "istanbul-istanbul"
                        });
                });

            modelBuilder.Entity("bookshop.entity.ProductAuthor", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAuthor");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            AuthorId = 2,
                            ProductId = 2
                        },
                        new
                        {
                            AuthorId = 3,
                            ProductId = 3
                        },
                        new
                        {
                            AuthorId = 4,
                            ProductId = 4
                        },
                        new
                        {
                            AuthorId = 5,
                            ProductId = 5
                        },
                        new
                        {
                            AuthorId = 6,
                            ProductId = 6
                        },
                        new
                        {
                            AuthorId = 7,
                            ProductId = 7
                        },
                        new
                        {
                            AuthorId = 8,
                            ProductId = 8
                        });
                });

            modelBuilder.Entity("bookshop.entity.ProductCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PublisherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            ProductId = 1,
                            PublisherId = 0
                        },
                        new
                        {
                            CategoryId = 4,
                            ProductId = 1,
                            PublisherId = 0
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 2,
                            PublisherId = 0
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 3,
                            PublisherId = 0
                        },
                        new
                        {
                            CategoryId = 4,
                            ProductId = 4,
                            PublisherId = 0
                        },
                        new
                        {
                            CategoryId = 3,
                            ProductId = 5,
                            PublisherId = 0
                        },
                        new
                        {
                            CategoryId = 3,
                            ProductId = 6,
                            PublisherId = 0
                        },
                        new
                        {
                            CategoryId = 3,
                            ProductId = 7,
                            PublisherId = 0
                        },
                        new
                        {
                            CategoryId = 3,
                            ProductId = 8,
                            PublisherId = 0
                        });
                });

            modelBuilder.Entity("bookshop.entity.ProductPublisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PublisherId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPublisher");

                    b.HasData(
                        new
                        {
                            PublisherId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            PublisherId = 4,
                            ProductId = 1
                        },
                        new
                        {
                            PublisherId = 2,
                            ProductId = 2
                        },
                        new
                        {
                            PublisherId = 2,
                            ProductId = 3
                        },
                        new
                        {
                            PublisherId = 4,
                            ProductId = 4
                        },
                        new
                        {
                            PublisherId = 3,
                            ProductId = 5
                        },
                        new
                        {
                            PublisherId = 3,
                            ProductId = 6
                        },
                        new
                        {
                            PublisherId = 3,
                            ProductId = 7
                        },
                        new
                        {
                            PublisherId = 3,
                            ProductId = 8
                        });
                });

            modelBuilder.Entity("bookshop.entity.ProductTranslator", b =>
                {
                    b.Property<int>("TranslatorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TranslatorId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTranslator");

                    b.HasData(
                        new
                        {
                            TranslatorId = 1,
                            ProductId = 5
                        },
                        new
                        {
                            TranslatorId = 2,
                            ProductId = 7
                        });
                });

            modelBuilder.Entity("bookshop.entity.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Appellation")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageLogo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT")
                        .HasMaxLength(14);

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherId = 1,
                            Appellation = "Yapı Kredi Yayınları Ltd. Şti",
                            Email = "iletisim@ykykultur.com.tr",
                            ImageLogo = "4.jpg",
                            Name = "Yapı Kredi Yayınları",
                            Url = "yapi-kredi",
                            Website = "www.yapikrediyayinlari.com.tr/iletisim"
                        },
                        new
                        {
                            PublisherId = 2,
                            Appellation = "Can Sanat Yayınları Ltd. Şti",
                            ImageLogo = "1.jpg",
                            Name = "Can Yayınları",
                            Url = "can",
                            Website = "https://www.canyayinlari.com/"
                        },
                        new
                        {
                            PublisherId = 3,
                            Appellation = "Doğan Yayınları Ltd. Şti",
                            ImageLogo = "2.jpg",
                            Name = "Doğan Yayınları",
                            Url = "dogan",
                            Website = "www.dogankitap.com.tr"
                        },
                        new
                        {
                            PublisherId = 4,
                            Appellation = "Remzi Yayınları Ltd. Şti",
                            Email = "post@remzi.com.tr",
                            ImageLogo = "3.jpg",
                            Name = "Remzi Yayınları",
                            Phone = "212 - 282 - 20 - 80",
                            Url = "remzi",
                            Website = "www.remzi.com.tr"
                        });
                });

            modelBuilder.Entity("bookshop.entity.Translator", b =>
                {
                    b.Property<int>("TranslatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageTranslator")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("TranslatorId");

                    b.ToTable("Translators");

                    b.HasData(
                        new
                        {
                            TranslatorId = 1,
                            ImageTranslator = "3.jpg",
                            Name = "Zeynep Arık",
                            Url = "zeynep-arik"
                        },
                        new
                        {
                            TranslatorId = 2,
                            ImageTranslator = "1.jpg",
                            Name = "Veysel Ataman",
                            Url = "veysel-ataman"
                        },
                        new
                        {
                            TranslatorId = 3,
                            ImageTranslator = "2.jpg",
                            Name = "Özgür Orhangazi",
                            Url = "ozgur-orhangazı"
                        });
                });

            modelBuilder.Entity("bookshop.entity.CartItem", b =>
                {
                    b.HasOne("bookshop.entity.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookshop.entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bookshop.entity.OrderItem", b =>
                {
                    b.HasOne("bookshop.entity.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookshop.entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bookshop.entity.ProductAuthor", b =>
                {
                    b.HasOne("bookshop.entity.Author", "Author")
                        .WithMany("ProductAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookshop.entity.Product", "Product")
                        .WithMany("ProductAuthors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bookshop.entity.ProductCategory", b =>
                {
                    b.HasOne("bookshop.entity.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookshop.entity.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bookshop.entity.ProductPublisher", b =>
                {
                    b.HasOne("bookshop.entity.Product", "Product")
                        .WithMany("ProductPublishers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookshop.entity.Publisher", "Publisher")
                        .WithMany("ProductPublishers")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bookshop.entity.ProductTranslator", b =>
                {
                    b.HasOne("bookshop.entity.Product", "Product")
                        .WithMany("ProductTranslators")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookshop.entity.Translator", "Translator")
                        .WithMany("ProductTranslators")
                        .HasForeignKey("TranslatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
